@page "/unit"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Unit</PageTitle>

<h1>Units</h1>

@if(IsDocumentLoaded() == false)
{
    <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Shade="Shade.Darker">
        No XBRL document instance loaded. Load a document before inspecting units.
    </RadzenAlert>
}

<RadzenDataGrid
    Data="@allUnits"
    TItem="JeffFerguson.Gepsio.Unit"
    AllowVirtualization="true"
    AllowFiltering="true"
    FilterPopupRenderMode="PopupRenderMode.OnDemand"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    LogicalFilterOperator="LogicalFilterOperator.Or"
    AllowSorting="true"
>
    <Columns>
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="Ratio" Title="Is Ratio?" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="IsIso4217CodeValid" Title="ISO 4217 Valid?" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="MeasureQualifiedNames" Title="Measure Qualified Names">
            <Template Context="detail">
                @String.Join(",", detail.MeasureQualifiedNames);
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [CascadingParameter]
    public XbrlDocument? XbrlDoc { get; set; }
    IEnumerable<JeffFerguson.Gepsio.Unit> allUnits;

    private bool IsDocumentLoaded()
    {
        if(XbrlDoc.XbrlFragments.Count == 0)
        {
            return false;
        }
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(IsDocumentLoaded() == false)
        {   
            allUnits = new List<JeffFerguson.Gepsio.Unit>().AsEnumerable<JeffFerguson.Gepsio.Unit>();     
        }
        else
        {
            allUnits = XbrlDoc.XbrlFragments[0].Units.AsEnumerable<JeffFerguson.Gepsio.Unit>();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
}