@*
This page takes as a URL "parameter" the zero-based index of the XBRL fragment containing the items to be
displayed on the page. It is assumed here that the XBRL document has already been loaded and that the
items are ready to be examined through the Gepsio object model.
*@

@page "/unit"
@page "/unit/{FragmentIndex:int}"

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Unit</PageTitle>

<h1>Units</h1>

@if(IsDocumentLoaded() == false)
{
    <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Shade="Shade.Darker">
        No XBRL document instance loaded. Load a document before inspecting document data.
    </RadzenAlert>
}

<RadzenDataGrid
    Data="@allUnits"
    TItem="JeffFerguson.Gepsio.Unit"
    AllowVirtualization="false"
    AllowFiltering="true"
    FilterPopupRenderMode="PopupRenderMode.OnDemand"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    LogicalFilterOperator="LogicalFilterOperator.Or"
    AllowSorting="true"
    PageSize="10"
    AllowPaging="true"
    ShowPagingSummary="true"
>
    <Columns>
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="Id" Title="ID" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="Ratio" Title="Is Ratio?" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="IsIso4217CodeValid" Title="ISO 4217 Valid?" />
        <RadzenDataGridColumn TItem="JeffFerguson.Gepsio.Unit" Property="MeasureQualifiedNames" Title="Measure Qualified Names">
            <Template Context="detail">
                @String.Join(",", detail.MeasureQualifiedNames);
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [CascadingParameter]
    public XbrlDocument? XbrlDoc { get; set; }

    [Parameter]
    public int FragmentIndex { get; set; }
    IEnumerable<JeffFerguson.Gepsio.Unit>? allUnits;

    private bool IsDocumentLoaded()
    {
        if(XbrlDoc!.XbrlFragments.Count == 0)
        {
            return false;
        }
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(IsDocumentLoaded() == false)
        {   
            allUnits = new List<JeffFerguson.Gepsio.Unit>().AsEnumerable<JeffFerguson.Gepsio.Unit>();     
        }
        else
        {
            allUnits = XbrlDoc?.XbrlFragments[FragmentIndex].Units.AsEnumerable<JeffFerguson.Gepsio.Unit>();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
}