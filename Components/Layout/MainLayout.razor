@inherits LayoutComponentBase

<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="XBRL Inspector" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded">
        <!-- Material icon list at https://fonts.google.com/icons -->
        <RadzenPanelMenu>
            <NavLink class="nav-link" Match="NavLinkMatch.All" href="load">
                <RadzenPanelMenuItem Text="Load" Icon="upload_file" />
            </NavLink>
            @if(ShowMenuItems == true)
            {
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="">
                    <RadzenPanelMenuItem Text="Dashboard" Icon="dashboard" />
                </NavLink>
                @foreach(var currentXbrlFragment in XbrlDoc!.XbrlFragments)
                {
                    <RadzenPanelMenuItem Text="Fragment" Icon="article">
                        @{
                            var fragmentId = FragmentMap!.Add(currentXbrlFragment);
                            if(currentXbrlFragment.Facts.Count > 0)
                            {
                                var hrefDestination = "fact/" + fragmentId;
                                <NavLink class="nav-link" Match="NavLinkMatch.All" href=@hrefDestination>
                                    <RadzenPanelMenuItem Text="Facts" Icon="dataset" />
                                </NavLink>                                
                            }
                            if(currentXbrlFragment.Units.Count > 0)
                            {
                                var hrefDestination = "unit/" + fragmentId;
                                <NavLink class="nav-link" Match="NavLinkMatch.All" href=@hrefDestination>
                                    <RadzenPanelMenuItem Text="Units" Icon="account_balance" />
                                </NavLink>                             
                            }
                            if(currentXbrlFragment.Contexts.Count > 0)
                            {
                                var hrefDestination = "context/" + fragmentId;
                                <NavLink class="nav-link" Match="NavLinkMatch.All" href=@hrefDestination>
                                    <RadzenPanelMenuItem Text="Contexts" Icon="calendar_month" />
                                </NavLink>                       
                            }
                            if(currentXbrlFragment.Schemas.Count > 0)
                            {
                                <RadzenPanelMenuItem Text="Schemas" Icon="schema">
                                    @foreach(var currentSchema in currentXbrlFragment.Schemas)
                                    {
                                        var schemaId = SchemaMap!.Add(currentSchema);
                                        var hrefDestination = "schema/" + schemaId;
                                        <NavLink class="nav-link" Match="NavLinkMatch.All" href=@hrefDestination>
                                            <RadzenPanelMenuItem Text="Schema" Icon="schema" />
                                        </NavLink>             
                                    }
                                </RadzenPanelMenuItem>
                            }
                        }
                    </RadzenPanelMenuItem>
                }
            }
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>
<RadzenComponents />

@code
{
    [CascadingParameter] public XbrlDocument? XbrlDoc { get; set; }
    [CascadingParameter] public XbrlFragmentMap? FragmentMap { get; set; }
    [CascadingParameter] public XbrlSchemaMap? SchemaMap { get; set; }
    bool sidebarExpanded = true;
    bool ShowMenuItems = false;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        MessageBroker.Instance.Subscribe<XbrlDocumentLoaded>(OnXbrlDocumentLoaded);
    }

    private void OnXbrlDocumentLoaded(MessagePayload<XbrlDocumentLoaded> payload)
    {
        ShowMenuItems = true;
        InvokeAsync(StateHasChanged);
    }
}
